name: Build and Push Docker Images

on:
  push:
    branches: [ test, main ]
  pull_request:
    branches: [ test, main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for Docker images'
        required: false
        default: 'latest'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Determine version tags
      - name: Set version tag
        id: version
        run: |
          # If this is a release, use the release tag
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Using release version: ${VERSION}"
          # If this is a workflow dispatch with custom version
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "latest" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Using dispatch version: ${VERSION}"
          # Otherwise use the current branch or commit hash
          else
            # Get current branch name or use short SHA for PRs
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              VERSION="pr-${{ github.event.pull_request.number }}"
            else
              VERSION="${GITHUB_REF#refs/heads/}"
            fi
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Using version: ${VERSION}"
          fi
        shell: bash

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: innovateanalytics/mlops-project
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short

      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=innovateanalytics/mlops-project:buildcache
          cache-to: ${{ github.event_name != 'pull_request' && 'type=registry,ref=innovateanalytics/mlops-project:buildcache,mode=max' || 'type=inline' }}
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}

      # Run smoke tests against the locally built image in pull requests
      - name: Run smoke tests
        if: github.event_name == 'pull_request'
        run: |
          echo "Starting API container for testing..."
          docker run -d --name mlops-api -p 8000:8000 innovateanalytics/mlops-project:sha-${{ github.sha }}
          echo "Waiting for API to start..."
          sleep 10
          echo "Running smoke tests..."
          python scripts/smoke_tests.py --api-url http://localhost:8000 --retries 3 --retry-delay 5
          echo "Stopping API container..."
          docker stop mlops-api
          docker rm mlops-api

      # Optional: build and push MLflow image
      - name: Set up MLflow image metadata
        id: meta-mlflow
        if: github.event_name != 'pull_request'
        uses: docker/metadata-action@v4
        with:
          images: innovateanalytics/mlops-project-mlflow
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short

      - name: Build and push MLflow Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: ./mlflow
          push: true
          tags: ${{ steps.meta-mlflow.outputs.tags }}
          labels: ${{ steps.meta-mlflow.outputs.labels }}

      # Send notification on success (only for main/test branch pushes or releases)
      - name: Send notification on success
        if: success() && github.event_name != 'pull_request'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "Docker images built and pushed successfully ðŸš€"
          SLACK_MESSAGE: "New version ${{ steps.version.outputs.version }} images have been published to DockerHub"
          SLACK_COLOR: good 